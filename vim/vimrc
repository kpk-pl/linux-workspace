syntax on
syntax enable
filetype plugin indent on
"filetype plugin on

" Enable sourcing .vimrc from project directories
set exrc
set secure

" TAB is 2 spaces, change existing
set tabstop=2
set softtabstop=2
set shiftwidth=2
set backspace=2
set expandtab

if has('mouse')
    set mouse=a
endif
set number
set helplang=en
set spelllang=en,pt_br
set history=50
set cursorline
set cursorcolumn
set noswapfile
set scrolloff=15
set laststatus=2
set noshowmode " don't show -- INSERT -- because it is on statusline
set clipboard+=unnamedplus

" highlight search results
set hlsearch

let mapleader=","

function! OpenHelpFile()
    if bufwinnr("vimhelp.txt") == -1
        :vsp ~/.vim/vimhelp.txt
    endif
endfunction
nnoremap <F1> :call OpenHelpFile()<CR>

nnoremap <F9> :call SourceHeaderJump()<CR>
nnoremap <S-F9> *:call SourceHeaderJump()<CR>n:noh<CR>
nnoremap <F10> :buffers<CR>:buffer<Space>
nnoremap <F11> <C-o>
nnoremap <S-F11> <C-i>
"nnoremap <F2> :UndotreeToggle<CR>
"nnoremap <F3> :UndotreeFocus<CR>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>

"Esc exits the terminal window
"tnoremap <Esc> <C-\><C-n>

"Up/Down arrows with Ctrl move 10 lines at a time
nnoremap <C-Down> 10j
nnoremap <C-Up> 10k

"PageUp/PageDown should move screen and keep current line position
nnoremap <PageUp> <C-u>zz
nnoremap <PageDown> <C-d>zz

"C++ include guards (type name of a guard and execute)
nnoremap <leader>mi yaw^i#ifndef <Esc>o#define <Esc>po<Return><Esc>Go<Return>#endif // <Esc>pkk

"Move/Copy buffer to new tab and/or go back
nnoremap <leader>mtm <C-W>T
nnoremap <leader>mtc <C-w>v<C-w>T
nnoremap <leader>mtb mAZZ<C-w>v`A<C-w>L

" Zoom / Restore window in current tab
function! s:ZoomToggle() abort
  if exists('t:zoom_winrestcmd')
    execute t:zoom_winrestcmd
    unlet t:zoom_winrestcmd
  else
    let t:zoom_winrestcmd = winrestcmd()
    resize
    vertical resize
  endif
endfunction
command! ZoomToggle call s:ZoomToggle()
nnoremap <silent> <C-A> :ZoomToggle<CR>

"set t_Co=256
"if &term =~ '256color'
"  set t_ut=
"endif

"if !has('gui_running')
"  set t_Co=256
"endif

if !empty($CONEMUBUILD)
    set term=pcansi
    set t_Co=256
    let &t_AB="\e[48;5;%dm"
    let &t_AF="\e[38;5;%dm"
    set bs=indent,eol,start
endif

"CtrlP
set runtimepath^=~/.vim/bundle/ctrlp.vim
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(exe|so|dll|bin)$',
    \ }

"NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" Ctrl-n moves focus to NERDTree
map <silent> <C-n> :NERDTreeFocus<CR>
let NERDTreeIgnore = ['\.pyc$', 'CMakeFiles$', '\.cmake$']
let g:NERDTreeIndicatorMapCustom = {
    \ 'Modified'  : '✹',
    \ 'Staged'    : '✚',
    \ 'Untracked' : '✭',
    \ 'Renamed'   : '➜',
    \ 'Unmerged'  : '═',
    \ 'Deleted'   : '✖',
    \ 'Dirty'     : '✗',
    \ 'Clean'     : '✓',
    \ 'Unknown'   : '?'
    \ }

"Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_cpp_compiler_options = ' -std=c++11 -stdlib=libc++'
let g:syntastic_cpp_remove_include_errors = 1

"undotree
if has("persistent_undo")
    set undodir=~/.undodir/
    set undofile
endif
"Shop the panel on the right
let g:undotree_WindowLayout = 3
let g:undotree_SetFocusWhenToggle = 1

"Easy grep
let g:EasyGrepCommand = "ag"
let g:EasyGrepRoot = "repository"
let g:EasyGrepFilesToExclude = "*.swp,*~,tags,compile_commands.json"

"YCM
let g:ycm_confirm_extra_conf = 0
let g:ycm_error_symbol = '»'
let g:ycm_warning_symbol = '»'
let g:ycm_add_preview_to_completeopt = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_server_python_interpreter = '/usr/bin/python'
nnoremap <F5> :YcmForceCompileAndDiagnostics<CR>
nnoremap <F6> :YcmShowDetailedDiagnostic<CR>
nnoremap <C-F6> :YcmDiags<CR>
nnoremap <leader>yt :YcmCompleter GetType<CR>
nnoremap <leader>yg :YcmCompleter GoTo<CR>
nnoremap <leader>yG <C-w>v<C-w>L:YcmCompleter GoTo<CR>
nnoremap <leader>yi :YcmCompleter GoToInclude<CR>
nnoremap <leader>yd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>yf :YcmCompleter FixIt<CR>

"Clang-format
let g:clang_format#command = 'clang-format-5.0'
let g:clang_format#detect_style_file = 1
autocmd FileType c,cpp,objc nnoremap <buffer><C-k> :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><C-k> :ClangFormat<CR>

"Easymotion
let g:EasyMotion_smartcase = 1
map <leader><leader>f <Plug>(easymotion-bd-f)
nmap <leader><leader>f <Plug>(easymotion-overwin-f)
map <leader><leader>w <Plug>(easymotion-bd-w)
nmap <leader><leader>w <Plug>(easymotion-overwin-w)
nmap <leader><leader>s <Plug>(easymotion-overwin-f2)
map <leader><leader>L <Plug>(easymotion-bd-jk)
nmap <leader><leader>L <Plug>(easymotion-overwin-line)

map / <Plug>(incsearch-forward)
map ? <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)
" consider incsearch-fuzzyspell-XXX)
"map <leader>z/ <Plug>(incsearch-easymotion-/)
"map <leader>z? <Plug>(incsearch-easymotion-?)
"map <leader>zg/ <Plug>(incsearch-easymotion-stay)
function! s:incsearch_config(...) abort
  return incsearch#util#deepextend(deepcopy({
  \   'modules': [incsearch#config#easymotion#module({'overwin': 1})],
  \   'keymap': {
  \     "\<CR>": '<Over>(easymotion)'
  \   },
  \   'is_expr': 0
  \ }), get(a:, 1, {}))
endfunction
noremap <silent><expr> <leader>z/  incsearch#go(<SID>incsearch_config())
noremap <silent><expr> <leader>z?  incsearch#go(<SID>incsearch_config({'command': '?'}))
noremap <silent><expr> <leader>zg/ incsearch#go(<SID>incsearch_config({'is_stay': 1}))

function! s:config_easyfuzzymotion(...) abort
  return extend(copy({
  \   'converters': [incsearch#config#fuzzy#converter()],
  \   'modules': [incsearch#config#easymotion#module()],
  \   'keymap': {"\<CR>": '<Over>(easymotion)'},
  \   'is_expr': 0,
  \   'is_stay': 1
  \ }), get(a:, 1, {}))
endfunction
noremap <silent><expr> <leader>Z/ incsearch#go(<SID>config_easyfuzzymotion())


"Now infect with plugins
let g:pathogen_disabled = ['vim-fugitive']

execute pathogen#infect()

colorscheme valloric
highlight VertSplit cterm=NONE ctermbg=NONE
highlight CursorLine cterm=NONE ctermbg=237
highlight CursorColumn cterm=NONE ctermbg=237

" Mark lines exceeding column width
if exists('+colorcolumn')
    set colorcolumn=110
    highlight ColorColumn ctermbg=darkgray
    " help cterm-colors
endif

highlight ExtraWhitespace ctermbg=lightyellow

